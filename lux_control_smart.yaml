blueprint:
  name: Inteligentne Utrzymywanie Luxów z Regresją Liniową
  description: >
    Zaawansowane sterowanie światłem używające regresji liniowej do precyzyjnego
    obliczania potrzebnej jasności. Zamiast ślepego zmieniania o stały krok,
    system oblicza dokładnie jaką jasność ustawić żeby osiągnąć docelowe lux.
    Dodatkowo: adaptacyjne uczenie się, kompensacja światła dziennego, zabezpieczenia.

  domain: automation

  input:
    room_id:
      name: Nazwa pomieszczenia (np. garderoba_master)
      default: garderoba_master
      selector:
        text:

    light_target:
      name: Lampy
      selector:
        entity:
          domain: light
          multiple: true

    sensor_lux:
      name: Czujnik lux
      selector:
        entity:
          domain: sensor

    motion_sensor:
      name: Czujnik ruchu
      selector:
        entity:
          domain: binary_sensor

    keep_on_minutes:
      name: Czas świecenia po ruchu (minuty)
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1

    home_mode:
      name: Tryb domu
      selector:
        entity:
          domain: input_select

    # Ustawienia lux dla różnych trybów (bez zmian)
    lux_normal_sun_day:
      name: Normal – dzień
      default: 400
      selector:
        number:
          min: 0
          max: 1500
          step: 10

    lux_normal_sun_night:
      name: Normal – noc
      default: 150
      selector:
        number:
          min: 0
          max: 1000
          step: 10

    lux_mode_noc:
      name: Tryb noc
      default: 10
      selector:
        number:
          min: 0
          max: 100
          step: 1

    lux_mode_impreza:
      name: Tryb impreza
      default: 500
      selector:
        number:
          min: 0
          max: 1500
          step: 10

    lux_mode_relaks:
      name: Tryb relaks
      default: 120
      selector:
        number:
          min: 0
          max: 1000
          step: 10

    lux_mode_film:
      name: Tryb film
      default: 60
      selector:
        number:
          min: 0
          max: 500
          step: 10

    lux_mode_sprzatanie:
      name: Tryb sprzątanie
      default: 600
      selector:
        number:
          min: 0
          max: 1500
          step: 10

    lux_mode_dziecko_spi:
      name: Tryb dziecko spi
      default: 8
      selector:
        number:
          min: 0
          max: 50
          step: 1

    buffer_minutes:
      name: Bufor przejścia dzień/noc (minuty)
      default: 30
      selector:
        number:
          min: 0
          max: 90
          step: 5

    # NOWE: Ustawienia smart sterowania
    deviation_margin:
      name: Tolerancja różnicy (lx)
      default: 15
      selector:
        number:
          min: 1
          max: 50
          step: 1

    max_brightness_change:
      name: Maksymalna zmiana jasności za jednym razem
      default: 50
      selector:
        number:
          min: 10
          max: 100
          step: 5

    min_regression_quality:
      name: Minimalna jakość regresji (R²) do użycia smart mode
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 1.0
          step: 0.1

    learning_rate:
      name: Szybkość adaptacyjnego uczenia (0.0-1.0)
      default: 0.1
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.05

    daylight_compensation:
      name: Kompensacja światła dziennego
      default: true
      selector:
        boolean:

trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: "on"

  - platform: time_pattern
    seconds: "30"

variables:
  room_id: !input room_id
  input_sensor_lux: !input sensor_lux
  input_motion_sensor: !input motion_sensor
  input_home_mode: !input home_mode
  input_light_target: !input light_target
  input_keep_on_minutes: !input keep_on_minutes

  # Parametry lux (bez zmian)
  input_lux_normal_sun_day: !input lux_normal_sun_day
  input_lux_normal_sun_night: !input lux_normal_sun_night
  input_lux_mode_noc: !input lux_mode_noc
  input_lux_mode_impreza: !input lux_mode_impreza
  input_lux_mode_relaks: !input lux_mode_relaks
  input_lux_mode_film: !input lux_mode_film
  input_lux_mode_sprzatanie: !input lux_mode_sprzatanie
  input_lux_mode_dziecko_spi: !input lux_mode_dziecko_spi
  input_buffer_minutes: !input buffer_minutes

  # NOWE: Smart parametry
  input_deviation_margin: !input deviation_margin
  input_max_brightness_change: !input max_brightness_change
  input_min_regression_quality: !input min_regression_quality
  input_learning_rate: !input learning_rate
  input_daylight_compensation: !input daylight_compensation

  # Podstawowe zmienne
  current_lux: "{{ states(input_sensor_lux) | float(0) }}"
  current_mode: "{{ states(input_home_mode) | string }}"
  motion_state: "{{ is_state(input_motion_sensor, 'on') }}"
  last_motion_ts: "{{ as_timestamp(states[input_motion_sensor].last_changed) }}"
  now_ts: "{{ now().timestamp() }}"
  keep_on_seconds: "{{ input_keep_on_minutes | int * 60 }}"
  recently_active: "{{ (now_ts - last_motion_ts) < keep_on_seconds }}"

  # Kalkulacja dzień/noc (bez zmian)
  sunrise: "{{ as_timestamp(state_attr('sun.sun', 'next_rising')) - 86400 }}"
  sunset: "{{ as_timestamp(state_attr('sun.sun', 'next_setting')) }}"
  buffer: "{{ input_buffer_minutes | float * 60 }}"

  sunrise_ratio: >-
    {% set start = sunrise %}
    {% set end = sunrise + buffer %}
    {% if now_ts < start %} 0
    {% elif now_ts > end %} 1
    {% else %} {{ ((now_ts - start) / buffer) }}
    {% endif %}

  sunset_ratio: >-
    {% set start = sunset %}
    {% set end = sunset + buffer %}
    {% if now_ts < start %} 1
    {% elif now_ts > end %} 0
    {% else %} {{ 1 - ((now_ts - start) / buffer) }}
    {% endif %}

  day_night_blend: >-
    {% if now_ts < (sunrise + buffer) %}
      {{ sunrise_ratio }}
    {% elif now_ts < sunset %}
      1
    {% elif now_ts < (sunset + buffer) %}
      {{ sunset_ratio }}
    {% else %}
      0
    {% endif %}

  # Docelowe lux (bez zmian)
  target_lux_val: >-
    {% set m = current_mode %}
    {% if m == 'noc' %} {{ input_lux_mode_noc }}
    {% elif m == 'impreza' %} {{ input_lux_mode_impreza }}
    {% elif m == 'relaks' %} {{ input_lux_mode_relaks }}
    {% elif m == 'film' %} {{ input_lux_mode_film }}
    {% elif m == 'sprzatanie' %} {{ input_lux_mode_sprzatanie }}
    {% elif m == 'dziecko_spi' %} {{ input_lux_mode_dziecko_spi }}
    {% else %}
      {{
        input_lux_normal_sun_night | float
        + (input_lux_normal_sun_day | float - input_lux_normal_sun_night | float) * day_night_blend
      }}
    {% endif %}

  # NOWE: Pobierz współczynniki regresji
  regression_a: "{{ states('input_number.light_regression_a_' + room_id) | float(1) }}"
  regression_b: "{{ states('input_number.light_regression_b_' + room_id) | float(0) }}"
  regression_quality: "{{ states('input_number.regression_quality_' + room_id) | float(0) }}"

  # NOWE: Kompensacja światła dziennego
  estimated_daylight: >-
    {% if input_daylight_compensation %}
      {% set sun_elevation = state_attr('sun.sun', 'elevation') | float(0) %}
      {% if sun_elevation > 0 %}
        {{ (sun_elevation / 90.0) * 200 * day_night_blend }}
      {% else %}
        0
      {% endif %}
    {% else %}
      0
    {% endif %}

  # NOWE: Skorygowane docelowe lux uwzględniające światło dzienne
  target_lux_corrected: "{{ (target_lux_val | float) - (estimated_daylight | float) }}"

  # Obecna jasność
  current_brightness: >
    {{
      expand(input_light_target)
      | map(attribute='attributes.brightness')
      | select('defined') | list | average(default=255) | int
    }}

  # NOWE: Smart kalkulacja docelowej jasności
  smart_target_brightness: >-
    {% if regression_quality | float >= input_min_regression_quality | float and regression_a | float != 0 %}
      {# Użyj regresji: lux = a * brightness + b, więc brightness = (lux - b) / a #}
      {% set calculated = ((target_lux_corrected | float) - (regression_b | float)) / (regression_a | float) %}
      {% set clamped = [1, [calculated | round, 255] | min] | max %}
      {{ clamped }}
    {% else %}
      {# Fallback: użyj proporcjonalnej kalkulacji #}
      {% set ratio = (target_lux_corrected | float) / (current_lux | float) if current_lux | float > 0 else 1 %}
      {% set calculated = (current_brightness | float) * ratio %}
      {% set clamped = [1, [calculated | round, 255] | min] | max %}
      {{ clamped }}
    {% endif %}

  # NOWE: Zabezpieczenie przed zbyt dużymi zmianami
  safe_target_brightness: >-
    {% set smart_target = smart_target_brightness | int %}
    {% set current = current_brightness | int %}
    {% set max_change = input_max_brightness_change | int %}
    {% set diff = smart_target - current %}
    {% if diff | abs > max_change %}
      {% if diff > 0 %}
        {{ current + max_change }}
      {% else %}
        {{ current - max_change }}
      {% endif %}
    {% else %}
      {{ smart_target }}
    {% endif %}

  # Odchylenie dla sprawdzenia czy potrzeba zmiana
  deviation: "{{ target_lux_val | float - current_lux }}"

  # NOWE: Czy używamy smart mode
  use_smart_mode: "{{ regression_quality | float >= input_min_regression_quality | float }}"

condition:
  - alias: "Sprawdź, czy był ruch niedawno"
    condition: or
    conditions:
      - condition: template
        value_template: "{{ motion_state }}"
      - condition: template
        value_template: "{{ recently_active }}"

action:
  - alias: "Inteligentne dostosowanie światła"
    choose:
      - alias: "SMART MODE: Użyj regresji liniowej"
        conditions:
          - condition: template
            value_template: "{{ use_smart_mode }}"
          - condition: template
            value_template: "{{ deviation | abs > (input_deviation_margin | float) }}"
        sequence:
          - alias: "Ustaw precyzyjnie obliczoną jasność"
            service: light.turn_on
            target:
              entity_id: !input light_target
            data:
              brightness: "{{ safe_target_brightness | int }}"
              transition: 2

          - alias: "Loguj smart działanie"
            service: logbook.log
            data:
              name: "Smart Lux Control"
              message: >
                🧠 SMART: {{ room_id }} | Docelowe: {{ target_lux_val }}lx | Obecne: {{ current_lux }}lx |
                Jasność: {{ current_brightness }}→{{ safe_target_brightness }} |
                Regresja: a={{ regression_a | round(3) }}, b={{ regression_b | round(1) }}, R²={{ regression_quality | round(3) }}

          # NOWE: Adaptacyjne uczenie - zbierz próbkę po zmianie
          - delay:
              seconds: 5
          - service: python_script.learn_brightness_lux
            data:
              room_id: "{{ room_id }}"
              sample: "{{ safe_target_brightness }}:{{ states(input_sensor_lux) | float }}"

      - alias: "FALLBACK MODE: Stare sterowanie krokowe"
        conditions:
          - condition: template
            value_template: "{{ not use_smart_mode }}"
          - condition: template
            value_template: "{{ deviation | abs > (input_deviation_margin | float) }}"
        sequence:
          - choose:
              - alias: "Za ciemno – zwiększ jasność"
                conditions:
                  - condition: template
                    value_template: "{{ deviation > 0 }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input light_target
                    data:
                      brightness: >
                        {{ [current_brightness + 25, 255] | min }}

              - alias: "Za jasno – przyciemnij"
                conditions:
                  - condition: template
                    value_template: "{{ deviation < 0 }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input light_target
                    data:
                      brightness: >
                        {{ [current_brightness - 25, 1] | max }}

          - alias: "Loguj fallback działanie"
            service: logbook.log
            data:
              name: "Fallback Lux Control"
              message: >
                ⚠️ FALLBACK: {{ room_id }} | R²={{ regression_quality | round(3) }} za niska |
                Docelowe: {{ target_lux_val }}lx | Odchylenie: {{ deviation | round(1) }}lx

    default:
      - alias: "Lux w tolerancji – monitoruj jakość"
        service: logbook.log
        data:
          name: "Lux Control"
          message: >
            ✅ OK: {{ room_id }} | {{ current_lux | round(1) }}lx (docelowe: {{ target_lux_val | round(1) }}lx) |
            {% if use_smart_mode %}Smart Mode{% else %}Fallback Mode{% endif %} |
            R²={{ regression_quality | round(3) }}

  # NOWE: Regularnie przeliczaj regresję dla lepszej jakości
  - alias: "Aktualizuj regresję co 10 minut"
    condition: template
    value_template: "{{ (now_ts | int) % 600 == 0 }}"
    service: python_script.calculate_brightness_regression
    data:
      room_id: "{{ room_id }}"

mode: single 